# SimVision Command Script (Thu Dec 02 11:05:43 MSK 2021)
#
# Version 17.10.s009
#
# You can restore this configuration with:
#
#     simvision -input /home/tvs/Desktop/WorkSpace/trial_task_2021/sim/simvision.svcf
#  or simvision -input /home/tvs/Desktop/WorkSpace/trial_task_2021/sim/simvision.svcf database1 database2 ...
#


#
# Preferences
#
preferences set toolbar-Standard-WatchWindow {
  usual
  shown 0
}
preferences set txe-locate-add-fibers 1
preferences set signal-type-colors {assertion #FF0000 output #FFA500 group #0099FF inout #00FFFF input #FFFF00 fiber #00EEEE errorsignal #FF0000 unknown #FFFFFF overlay #0099FF internal #00FF00 reference #FFFFFF}
preferences set txe-view-hold 0
preferences set txe-navigate-search-locate 0
preferences set plugin-enable-svdatabrowser-new 1
preferences set toolbar-SimControl-WaveWindow {
  usual
  position -row 1 -pos 0
}
preferences set cursorctl-dont-show-sync-warning 1
preferences set toolbar-Windows-WatchWindow {
  usual
  shown 0
}
preferences set toolbar-CursorControl-WaveWindow {
  usual
  position -row 1 -pos 1
}
preferences set verilog-colors {Su #ff0099 0 {} 1 {} HiZ #ff9900 We #00ffff Pu #9900ff Sm #00ff99 X #ff0000 StrX #ff0000 other #ffff00 Z #ff9900 Me #0000ff La #ff00ff St {}}
preferences set toolbar-sendToIndago-WaveWindow {
  usual
  position -pos 5
}
preferences set txe-navigate-waveform-locate 1
preferences set txe-view-hidden 0
preferences set toolbar-TimeSearch-WaveWindow {
  usual
  position -row 0 -pos 6 -anchor e
}
preferences set toolbar-TimeSearch-SchematicWindow {
  usual
  position -row 0 -pos 4 -anchor e
}
preferences set toolbar-Standard-Console {
  usual
  position -pos 1
}
preferences set toolbar-Windows-SchematicWindow {
  usual
  position -pos 7
}
preferences set txe-search-show-linenumbers 1
preferences set schematic-show-rtl 0
preferences set toolbar-Search-Console {
  usual
  position -pos 2
}
preferences set toolbar-NavSignalList-WaveWindow {
  usual
  position -row 0 -pos 2
}
preferences set toolbar-txe_waveform_toggle-WaveWindow {
  usual
  position -pos 3 -anchor e
}
preferences set toolbar-CursorControl-SchematicWindow {
  usual
  position -row 0 -pos 6 -anchor e
}
preferences set plugin-enable-groupscope 0
preferences set key-bindings {PageUp PageUp Edit>Undo Ctrl+z View>Zoom>Next {Alt+Right arrow} View>Zoom>In Alt+i PageDown PageDown ScrollDown {Down arrow} Edit>Copy Ctrl+c Edit>Select>All Ctrl+a Simulation>NextInScope F7 View>Zoom>FullY_widget y Edit>Create>Group Ctrl+g Format>Radix>Decimal Ctrl+Shift+D Edit>Ungroup Ctrl+Shift+G TopOfPage Home Edit>Create>Condition Ctrl+e {command -console SimVision {%w sidebar access designbrowser selectall}} Alt+a ScrollLeft {Left arrow} Edit>SelectAllText Alt+a Edit>TextSearchConsole Alt+s View>Zoom>FullX_widget = Windows>SendTo>Waveform Ctrl+w Simulation>Return Shift+F5 View>CallstackDown {Ctrl+Down arrow} Select>All Ctrl+a Edit>Delete Del Edit>Cut Ctrl+x Simulation>Run F2 Edit>Create>Marker Ctrl+m Format>Radix>Octal Ctrl+Shift+O View>Center Alt+c View>CallstackInWindow Ctrl+k Edit>SelectAll Ctrl+a File>OpenDatabase Ctrl+o Edit>Redo Ctrl+y View>ExpandSequenceTime>AtCursor Alt+x Format>Radix>Binary Ctrl+Shift+B ScrollUp {Up arrow} File>CloseWindow Ctrl+Shift+w ScrollRight {Right arrow} View>Zoom>FullX Alt+= Edit>Create>Bus Alt+w Explore>NextEdge Ctrl+\] View>Zoom>Cursor-Baseline Alt+z View>Zoom>OutX Alt+o Edit>GoToLine Ctrl+g View>Zoom>Fit Alt+= View>Zoom>OutX_widget o View>CallstackUp {Ctrl+Up arrow} View>Bookmarks>Add Ctrl+b Edit>Search Ctrl+f Format>Radix>Hexadecimal Ctrl+Shift+H Simulation>Next F6 View>ShowValues Ctrl+s View>Zoom>InX Alt+i Edit>Create>MarkerAtCursor Ctrl+Shift+M View>Zoom>Out Alt+o Edit>TextSearch Ctrl+f View>Zoom>Previous {Alt+Left arrow} Format>Signed Ctrl+Shift+S Edit>Paste Ctrl+v View>CollapseSequenceTime>AtCursor Alt+s Format>Radix>ASCII Ctrl+Shift+A View>Zoom>InX_widget i BottomOfPage End Simulation>Step F5 Explore>PreviousEdge {Ctrl+[}}
preferences set plugin-enable-interleaveandcompare 0
preferences set plugin-enable-waveformfrequencyplot 0
preferences set toolbar-SimControl-WatchWindow {
  usual
  shown 0
}
preferences set toolbar-Windows-MemViewer {
  usual
  position -pos 1
}
preferences set toolbar-Windows-WaveWindow {
  usual
  position -pos 1 -anchor w
}
preferences set txe-navigate-waveform-next-child 1
preferences set toolbar-WaveZoom-WaveWindow {
  usual
  position -row 1
}
preferences set vhdl-colors {H #00ffff L #00ffff 0 {} X #ff0000 - {} 1 {} U #9900ff Z #ff9900 W #ff0000}
preferences set txe-locate-scroll-x 1
preferences set txe-locate-scroll-y 1
preferences set toolbar-Zoom-SchematicWindow {
  usual
  position -row 0 -pos 3
}
preferences set toolbar-Trace-SchematicWindow {
  usual
  position -pos 5
}
preferences set txe-locate-pop-waveform 1
preferences set whats-new-dont-show-at-startup 1
preferences set toolbar-TimeSearch-WatchWindow {
  usual
  shown 0
}
preferences set toolbar-SimControl-MemViewer {
  usual
  position -pos 0 -anchor e
}

#
# PPE data
#
array set dbNames ""
set dbNames(realName1) [database require waves -hints {
	file ./waves.shm/waves.trn
	file /home/tvs/Desktop/WorkSpace/trial_task_2021/sim/waves.shm/waves.trn
}]
#
# Groups
#
catch {group new -name {Master 0} -overlay 0}
catch {group new -name {Master 1} -overlay 0}
catch {group new -name {Master 2} -overlay 0}
catch {group new -name {Master 3} -overlay 0}
catch {group new -name {Slave 0} -overlay 0}
catch {group new -name {Slave 1} -overlay 0}
catch {group new -name {Slave 2} -overlay 0}
catch {group new -name {Slave 3} -overlay 0}
catch {group new -name {Device Slave 0 req} -overlay 0}
catch {group new -name {Device Slave 0 grant} -overlay 0}
catch {group new -name {vip Slave 0} -overlay 0}
group using {Master 0}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.master_clk[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_req[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_cmd[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_addr[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_wdata[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_ack[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_rdata[0]}]} ]
group using {Master 1}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.master_clk[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_req[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_cmd[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_addr[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_wdata[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_ack[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_rdata[1]}]} ]
group using {Master 2}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.master_clk[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_req[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_cmd[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_addr[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_wdata[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_ack[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_rdata[2]}]} ]
group using {Master 3}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.master_clk[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_req[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_cmd[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_addr[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_wdata[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_ack[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.master_rdata[3]}]} ]
group using {Slave 0}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.slave_clk[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_req[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_cmd[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_addr[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_wdata[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_ack[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_rdata[0]}]} ]
group using {Slave 1}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.slave_clk[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_req[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_cmd[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_addr[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_wdata[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_ack[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_rdata[1]}]} ]
group using {Slave 2}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.slave_clk[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_req[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_cmd[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_addr[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_wdata[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_ack[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_rdata[2]}]} ]
group using {Slave 3}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.slave_clk[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_req[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_cmd[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_addr[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_wdata[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_ack[3]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.slave_rdata[3]}]} ]
group using {Device Slave 0 req}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[3]}]} ]
group using {Device Slave 0 grant}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[0]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[1]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[2]}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[3]}]} ] \
    {vip Slave 0}
group using {vip Slave 0}
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    [subst  {$dbNames(realName1)::[format {tb.vip_slave_gen[0].vip_slave_gen.clk}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.vip_slave_gen[0].vip_slave_gen.slave_req}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.vip_slave_gen[0].vip_slave_gen.slave_ack}]} ] \
    [subst  {$dbNames(realName1)::[format {tb.vip_slave_gen[0].vip_slave_gen.ack}]} ]

#
# Mnemonic Maps
#
mmap new -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

#
# Design Browser windows
#
if {[catch {window new WatchList -name "Design Browser 1" -geometry 806x858+261+33}] != ""} {
    window geometry "Design Browser 1" 806x858+261+33
}
window target "Design Browser 1" on
browser using {Design Browser 1}
browser set -scope [subst  {$dbNames(realName1)::[format {tb}]} ]
browser set \
    -signalsort name
browser yview see [subst  {$dbNames(realName1)::[format {tb}]} ]
browser timecontrol set -lock 0

#
# Waveform windows
#
if {[catch {window new WaveWindow -name "Waveform 1" -geometry 1920x1174+1920+0}] != ""} {
    window geometry "Waveform 1" 1920x1174+1920+0
}
window target "Waveform 1" on
waveform using {Waveform 1}
waveform sidebar visibility partial
waveform set \
    -primarycursor TimeA \
    -signalnames name \
    -signalwidth 175 \
    -units ps \
    -valuewidth 75
waveform baseline set -time 0


set groupId0 [waveform add -groups {{Master 0}}]


set groupId0 [waveform add -groups {{Master 1}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.master_clk[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_req[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_cmd[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_addr[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_wdata[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_ack[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.master_rdata[1]}]} {-color #00ffff -namecolor #00ffff}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups {{Master 2}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.master_clk[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_req[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_cmd[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_addr[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_wdata[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_ack[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.master_rdata[2]}]} {-color #ffff00 -namecolor #ffff00}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups {{Master 3}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.master_clk[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_req[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_cmd[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_addr[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_wdata[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_ack[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.master_rdata[3]}]} {-color #ffffff -namecolor #ffffff}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups {{Slave 0}}]


set groupId0 [waveform add -groups {{Slave 1}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.slave_clk[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_req[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_cmd[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_addr[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_wdata[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_ack[1]}]} {-color #00ffff -namecolor #00ffff}
    {$dbNames(realName1)::[format {tb.slave_rdata[1]}]} {-color #00ffff -namecolor #00ffff}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups {{Slave 2}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.slave_clk[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_req[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_cmd[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_addr[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_wdata[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_ack[2]}]} {-color #ffff00 -namecolor #ffff00}
    {$dbNames(realName1)::[format {tb.slave_rdata[2]}]} {-color #ffff00 -namecolor #ffff00}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups {{Slave 3}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.slave_clk[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_req[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_cmd[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_addr[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_wdata[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_ack[3]}]} {-color #ffffff -namecolor #ffffff}
    {$dbNames(realName1)::[format {tb.slave_rdata[3]}]} {-color #ffffff -namecolor #ffffff}
}] childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}
waveform hierarchy collapse $groupId0

set id [waveform add -signals [subst  {
	{$dbNames(realName1)::[format {tb.device_clk}]}
	} ]]
set id [waveform add -signals [subst  {
	{$dbNames(realName1)::[format {tb.resetn}]}
	} ]]

set groupId0 [waveform add -groups {{Device Slave 0 req}}]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[0]}]} {-color #ffff00}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[1]}]} {-color #ffff00}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[2]}]} {-color #ffff00}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.req[3]}]} {-color #ffff00}
}] childcmds {
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups {{Device Slave 0 grant}}]

set groupId1 [waveform find -name {vip Slave 0}]

set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs} [subst  {
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[0]}]} {-color #00ff99}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[1]}]} {-color #00ff99}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[2]}]} {-color #00ff99}
    {$dbNames(realName1)::[format {tb.dut.slave_instance_gen[0].slv.grant[3]}]} {-color #00ff99}
}] childcmds {
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


waveform xview limits 0 574970ps

#
# Waveform Window Links
#

#
# Console windows
#
console set -windowname Console
window geometry Console 730x1120+1186+25

#
# Layout selection
#

